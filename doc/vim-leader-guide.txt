*vim-leader-guide.txt*      A vim key-guide.
*leader-guide*

==============================================================================
CONTENTS                                                 *leader-guide-contents*

Overview                                    |leader-guide-overview|
  Configuration                               |leader-guide-configuration|
Usage examples                              |leader-guide-examples|

Commands                                    |leader-guide-commands|
Mappings                                    |leader-guide-mappings|
Functions                                   |leader-guide-functions|
Global variables                            |leader-guide-globals|

CHANGELOG                                   |leader-guide-changelog|


==============================================================================
OVERVIEW                                                 *leader-guide-overview*

|vim-leader-guide| is a plugin to explore keymaps.
The name is a slight misnomer. The guide does work for all keys, as well as
global mappings. Not just for <leader>.

Features:~
  - Show keymaps assigned to a specific prefix, such as leader, localleader or
    any other key.
  - Show all global and buffer-local keymaps. (For plugin buffers)
  - Provide additional descriptions for mappings and groups of mappings
  - No default mappings, no autocommands. Does nothing on it's own.


------------------------------------------------------------------------------
Configuration                                       *leader-guide-configuration*

Most of the configuration is optional. It is perfectly possible to call
the guide without any configuration, using the commands and mappings explained
in |leader-guide-commands| and |leader-guide-mappings|.

To provide the guide with group names and/or descriptive texts to show,
configuration is necessary.

Group names~
To define group names, use configuration dictionaries as shown in the next
section.

Descriptions~
To replace the right-hand-side of mappings with descriptive texts use one of
the following methods:
    1. <Plug> or <SID> mappings (see |leader-guide-<Plug>-mappings| and
        |g:leaderGuide_displayfunc|)
    2. Lookup tables (see |g:leaderGuide_displayfunc|)
    3. Configuration dictionaries (see |leader-guide-examples| right below)

Configuration dictionaries are the most flexible, but also most intrusive
variant.
When possible I would recommend to use <Plug> or <SID> mappings.

==============================================================================
USAGE EXAMPLES                                           *leader-guide-examples*

Basic Configuration~
>
    " Define prefix dictionary
    let g:lmap =  {}

    " Second level dictionaries:
    let g:lmap.f = { 'name' : 'File Menu' }
    let g:lmap.o = { 'name' : 'Open Stuff' }
    " 'name' is a special field. It will define the name of the group.
    " leader-f is the "File Menu" group.
    " Unnamed groups will show an empty string

    " Provide commands and descriptions for existing mappings
    nmap <silent> <leader>fd :e $MYVIMRC<CR>
    let g:lmap.f.d = ['e $MYVIMRC', 'Open vimrc']

    nmap <silent> <leader>fs :so %<CR>
    " let g:lmap.f.s = ['so %', 'Source file']

    nmap <silent> <leader>oo  :copen<CR>
    " let g:lmap.o.o = ['copen', 'Open quickfix']

    nmap <silent> <leader>ol  :lopen<CR>
    " let g:lmap.o.l = ['lopen', 'Open locationlist']

    nmap <silent> <leader>fw :w<CR>
    " let g:lmap.f.w = ['w', 'Write file']
<
Menu Function~
>
    " Create new menus not based on existing mappings:
    let g:lmap.g = {
                    \'name' : 'Git Menu',
                    \'s' : ['Gstatus', 'Git Status'],
                    \'p' : ['Gpull',   'Git Pull'],
                    \'u' : ['Gpush',   'Git Push'],
                    \'c' : ['Gcommit', 'Git Commit'],
                    \'w' : ['Gwrite',  'Git Write'],
                    \}

<
NerdCommenter~
>
    " If you use NERDCommenter:
    let g:lmap.c = { 'name' : 'Comments' }
    " Define some descriptions
    let g:lmap.c.c = ['call feedkeys("\<Plug>NERDCommenterComment")','Comment']
    let g:lmap.c[' '] = ['call feedkeys("\<Plug>NERDCommenterToggle")','Toggle']
    " The Descriptions for other mappings defined by NerdCommenter, will default
    " to their respective commands.

<
Plugin Specific Menus~
>
    " set up dictionary for <localleader>
    let g:llmap = {}
    autocmd FileType tex let g:llmap.l = { 'name' : 'vimtex' }
    call leaderGuide#register_prefix_descriptions(",", "g:llmap")
    " to name the <localleader>-n group vimtex in tex files.
<

Paging Function~
>
    let g:leaderGuide_max_size = 5
    let g:leaderGuide_special_mappings = { '<C-F>': 'page_down', '<C-B>': 'page_up'}


Final Setup~
>
    " combine the two dictionaries into a single top-level dictionary:
    let g:topdict = {}
    let g:topdict[' '] = g:lmap
    let g:topdict[' ']['name'] = '<leader>'
    let g:topdict[','] = g:llmap
    let g:topdict[',']['name'] = '<localleader>'

    " register it with the guide:
    call leaderGuide#register_prefix_descriptions("", "g:topdict")

    " define mappings:
    nnoremap <silent> <leader> :<c-u>LeaderGuide '<Space>'<CR>
    vnoremap <silent> <leader> :<c-u>LeaderGuideVisual '<Space>'<CR>
    map <leader>. <Plug>leaderguide-global
    nnoremap <localleader> :<c-u>LeaderGuide  ','<CR>
    vnoremap <localleader> :<c-u>LeaderGuideVisual  ','<CR>
    map <localleader>. <Plug>leaderguide-buffer
<

                                                *leader-guide-<Plug>-mappings*
<Plug>-mappings~
    Note: Depending on your use case extensive dictionary configuration might
    not be necessary.

    Instead of >
    nmap <silent> <leader>fd :e $MYVIMRC<CR>
    let g:lmap.f.d = ['e $MYVIMRC', 'Open vimrc']
<
    one could simply use: >
    nnoremap <Plug>open-vimrc :e $MYVIMRC<CR>
    nmap <leader>fd <Plug>open-vimrc
<
    or >
    nnoremap <SID>open-vimrc :e $MYVIMRC<CR>
    nmap <leader>fd <SID>open-vimrc
<
    This variant is a lot less intrusive and just as descriptive as the
    dictionary variant above.
    This way it is possible to limit the dictionaries to group names.

    Note: The <Plug> prefix can be hidden with:
    |g:leaderGuide_displayfunc|
>

==============================================================================
COMMANDS                                                 *leader-guide-commands*

|vim-leader-guide| provides the following ex-commands:
    LeaderGuide '(String)'                          |LeaderGuide|
    LeaderGuideVisual '(String)'                    |LeaderGuideVisual|
    LeaderGuideD {dict}                             |LeaderGuideD|
    LeaderGuideVisualD {dict}                       |LeaderGuideVisualD|



                                                                 *LeaderGuide*
:LeaderGuide '{prefix}'

    Opens the guide window for the given prefix.
    This command, together with |LeaderGuideVisual| is the primary way of
    interacting with the plugin.

    Examples:
>
    nnoremap <leader> :<C-U>LeaderGuide ' '<CR>
    nnoremap <localleader> :<C-U>LeaderGuide ','<CR>

    :LeaderGuide 'y'
    :LeaderGuide '<C-W>'
<
    Note: Please start commands in mappings with a <C-U> as shown above.


                                                           *LeaderGuideVisual*
:LeaderGuideVisual '{prefix}'

    Same as |LeaderGuide|. Opens the guide in visual mode.

    Examples:
>
    vnoremap <leader> :<C-U>LeaderGuideVisual ' '<CR>
    etc.
<
    Note: Please start commands in mappings with a <C-U> as shown above.


                                                                *LeaderGuideD*
:LeaderGuideD {dict}

    Opens the guide window for a given dictionary directly.
    This command will not parse for mappings.

    This functionality can be used to build selection menus independent from
    native vim mappings.

    Examples:
>
    :LeaderGuideD g:mydict
<

    Note: To display keymaps use the |LeaderGuide| command, possible in
    combination with |leaderGuide#register_prefix_descriptions()|.


                                                          *LeaderGuideVisualD*
:LeaderGuideVisualD {dict}

    Same as |LeaderGuideD|, opening the menu in visual mode.


==============================================================================
MAPPINGS                                                 *leader-guide-mappings*

                                                    *<Plug>leaderguide-global*
<Plug>leaderguide-global
    Opens a guide popup with all global mappings.

    Example: >
    map <leader>. <Plug>leaderguide-global
<

                                                    *<Plug>leaderguide-buffer*
<Plug>leaderguide-buffer
    Opens a guide popup with all buffer local mappings.
    This feature is useful, to explore mappings defined by plugins in their
    respective buffers. (eg. fugitive, tagbar, vimfiler and others)

    Example: >
    map <localleader>. <Plug>leaderguide-buffer
<

==============================================================================
FUNCTIONS                                               *leader-guide-functions*

                                  *leaderGuide#register_prefix_descriptions()*
leaderGuide#register_prefix_descriptions("{prefix}", "{dictname}")

    Provide the guide with a description dictionary. This dictionary is used
    to provide convenient names for mappings to display in the guide popup.
    Additionally it is used to provide group names.

    See also: |leader-guide-examples|

    Types:
        {prefix}:   String
        {dictname}: String

    Example 1:
>
    " register dictionary for the <Space>-prefix
    call leaderGuide#register_prefix_descriptions(' ', "g:space_prefix_dict")
    " register dictionary for the ,-prefix
    call leaderGuide#register_prefix_descriptions(',', "g:comma_prefix_dict")
<
    Example 2: >

    " register a top-level dictionary:
    let g:space_prefix_dict['name'] = '<leader>'
    let g:globalguide = {}
    let g:globalguide[' '] = g:space_prefix_dict
    let g:globalguide[',']['name'] = '<localleader>'
    call leaderGuide#register_prefix_descriptions("", "g:globalguide")
<
    Note: To pass a top-level dictionary call the function with an empty
    prefix string

    Note: Please use either a single top-level dictionary, or one or more
    prefix specific dictionaries. Don't mix a top-level with prefix specific
    dictionaries.
    Instead, as shown above, insert the prefix specific dictionaries into the
    top-level one and pass only the latter to the guide.

    Note: After passing a dictionary name to the guide do not unlet the actual
    global dictionary. It is possible update the guide descriptions on the fly
    by changing g:dict.

    Default:
>
    let g:leaderGuide_map = {}
    call leaderGuide#register_prefix_descriptions('', 'g:leaderGuide_map')
<


                                                *leaderGuide#parse_mappings()*
leaderGuide#parse_mappings()
    Update all cached mappings to the current ones.
    
    Note: Only call this function if |g:leaderGuide_run_map_on_popup| is unset
    and the current mappings have changed (switched to a buffer with other
    mappings, new filetype, manual change, etc.)
        

==============================================================================
GLOBAL VARIABLES                                          *leader-guide-globals*

|vim-leader-guide| uses the following configuration variables:

    ----------------------------------------------------------~
     VAR                                             DEFAULT ~
    ----------------------------------------------------------~
     |g:leaderGuide_position|                         botright
     |g:leaderGuide_vertical|                                0
     |g:leaderGuide_hspace|                                  5
     |g:leaderGuide_sort_horizontal|                         0
     |g:leaderGuide_default_group_name|                       
     |g:leaderGuide_run_map_on_popup|                        1
     |g:leaderGuide_flatten|                                 1
     |g:leaderGuide_hide_in_display|           see description

                                                      *g:leaderGuide_position*
g:leaderGuide_position~
    Set the direction from witch the guide-buffer should pop up.

    Note: Use in conjunction with |g:leaderGuide_vertical| to set the
    buffer-position

    Possible values:        `botright`, `topleft`
    Default:                `botright`


                                                      *g:leaderGuide_vertical*
g:leaderGuide_vertical~
    If set to a value other than 0, the guide buffer will pop up in vertical
    split window.

    Note: Use in conjunction with |g:leaderGuide_position| to set the
    buffer-position

    Possible values:        {0,1}
    Default:                0


                                                        *g:leaderGuide_hspace*
g:leaderGuide_hspace~
    Sets the minimum horizontal space between the displayed colomns.

    The actual column width is the length of the longest entry plus this
    value.

    Possible values:        {Number}
    Default:                5


                                               *g:leaderGuide_sort_horizontal*
g:leaderGuide_sort_horizontal~
    If set to a value other than 0, the entries will be sorted horizontal.

    Possible values:        {0,1}
    Default:                0


                                              *g:leaderGuide_default_group_name*
g:leaderGuide_default_group_name~
    Allows to set a default group name. This name is shown as group
    description when the configuration dictionary has no corrosponding entry.

    Example:
>
    let g:leaderGuide_default_group_name = "+group"
<

    Possible values:        {String}
    Default:                "" (Empty String)


                                              *g:leaderGuide_run_map_on_popup*
g:leaderGuide_run_map_on_popup~
    If set to 0, |vim-leader-guide| will not parse mappings when opening a
    guide buffer. Cached values will be used instead.

    Note: It is not recommended to disable this option. Mappings change during
    a vim-session, when changing the filetype or buffer for example.
    Thus, when disabling this option the displayed mappings might get
    outdated.
    The delay when opening the guide is negligible.

    Note: It is possible to update the cache manually with
    |leaderGuide#parse_mappings()|

    Possible values:        {0,1}
    Default:                1


                                                       *g:leaderGuide_flatten*
g:leaderGuide_flatten~
    If set to 1, |vim-leader-guide| will try to flatten out the keymappings if
    necessary.

    Example:
        vim-surround (|https://github.com/tpope/vim-surround|) defines
        the following mappings by default: (among others)
        ys  -> <Plug>Ysurround
        yss -> <Plug>Yssurround

        Upon pressing `ys`, the first mapping is triggered when following up
        with a text object. The second one is triggered by following with
        another `s`.

        With the flatten option set, the guide (`:LeaderGuide` `'y'`) will
        display:
>
        [s]  <Plug>Ysurround       [ss] <Plug>Yssurround
<
        when under normal behaviour the [ss] mapping would be displayed as
        [s] in the [s] subgroup.


    Note: With this option set to 0 mappings of the above type are not
    displayed correctly. Only the longest mappings will appear in the guide.

    Possible values:        {0,1}
    Default:                1



                                                   *g:leaderGuide_displayfunc*
g:leaderGuide_displayfunc~
    Sets a function to call on all for every displaystring in the guide
    buffer.
    
    Inside of the function |g:leaderGuide#displayname| is available as the
    string to display for the current mapping. It can be manipulated by
    the function.

    Example:
>
    function! s:my_displayfunc()
        let g:leaderGuide#displayname =
        \ substitute(g:leaderGuide#displayname, '\c<cr>$', '', '')
        let g:leaderGuide#displayname = 
        \ substitute(g:leaderGuide#displayname, '^<Plug>', '', '')
    endfunction
    let g:leaderGuide_displayfunc = [function("s:my_displayfunc")]
<
    The above settings will hide all trailing <CR> as well as all leading
    <Plug> substrings in the guide buffer.

    :so $MYVIMRC<CR> => :so $MYVIMRC
    <Plug>Ysurround  => Ysurround

    Example 2: >

    let s:value_lookup = {
                        \ '<Plug>Ysurround': 'dnuorrusY',
                        \ ':so $MYVIMRC<CR>': 'open my vimrc',
                        \ '<Plug>(easymotion-prefix)': 'easymotion',
                        \ }

    function! s:my_displayfunc()
        let g:leaderGuide#displayname =
                \get(s:value_lookup, g:leaderGuide#displayname,
                \g:leaderGuide#displayname)
    endfunction
    let g:leaderGuide_displayfunc = [function("s:my_displayfunc")]
<
    Instead of the default keymaps, the lookup value will be displayed.

    :so $MYVIMRC<CR>          => open my vimrc
    <Plug>Ysurround           => dnuorrusY
    <Plug>(easymotion-prefix) => easymotion


    Possible values:        {list} of funcrefs
    Default: >
    function! s:leaderGuide_display()
        let g:leaderGuide#displayname =
        \ substitute(g:leaderGuide#displayname, '\c<cr>$', '', '')
    endfunction
<

                                                   *g:leaderGuide#displayname*
g:leaderGuide#displayname~
    This variable is set to the displayname (The string that will show up in
    the guide buffer) of a mapping. Only available in display functions.
    See |g:leaderGuide_displayfunc|.

    Do not set this variable manually outside of a display function. It will
    be overwritten anyway.


                                                      *g:leaderGuide_max_size*
g:leaderGuide_max_size~
    Sets the maximum height/width of the guide window.
    Set to 0 for unlimited size.

    Note: Use in conjunction with the paging function.
          See |g:leaderGuide_special_mappings|.

    Possible values:        {Integer}
    Default:                0


                                              *g:leaderGuide_special_mappings*
g:leaderGuide_submode_mappings~
    This variable takes a dictionary in which the user can define addon
    specific mappings, to call functions within the guide window.
    To access this mappings preface them with <C-C>

    Currently this is only used for paging, when there are too many mappings
    to show within the size limit. (|g:leaderGuide_max_size|)

    Currently the following functions are available:
        - page_down
        - page_up
        - win_close

    Paging example: >

        let g:leaderGuide_special_mappings = 
          \ { '<C-C>: 'win_close', '<C-F>': 'page_down', '<C-B>': 'page_up'}
<
    Page down with <C-C><C-F>, page up with <C-C><C-B>.

    Note: It is not possible to use <C-C> as a regular mapping.

    Possible value:         {Dictionary}
    Default: >
        let g:leaderGuide_special_mappings = {'<C-C>': "win_close"}
<



==============================================================================
CHANGELOG                                               *leader-guide-changelog*

    2016-11-06:     - Add paging function.
                      (See |g:leaderGuide_max_size| and
                      |g:leaderGuide_special_mappings|)

    2016-09-18:     - Add option to set a default group name.
                      (See |g:leaderGuide_default_group_name|)

    2016-04-22:     - Sort entries vertical by default.
                      (See |g:leaderGuide_sort_horizontal|)

                      Note: To get the old behaviour back:
                      let g:leaderGuide_sort_horizontal = 1

    2016-04-21:     - Remove cmd-mode

    2016-04-18:     - Use <Plug>-mappings to open global and buffer-local
                      displays. (See |leader-guide-mappings|)

                      Compatibility Note:
                      1. Instead of :LeaderGuide "<buffer>" use
                         <Plug>leaderguide-buffer
                      2. Instead of :LeaderGuide "  " use
                         <Plug>leaderguide-global

    2016-04-16:     - Add option to run functions on the displayname.
                      (See |g:leaderGuide_displayfunc|)

    2016-04-12:     - Add option to flatten map<->group conflicts.
                      (See |g:leaderGuide_flatten|)

    2016-04-10:     - Support for {count}, and register passthrough
                    - Rename g:leaderGuide_vspace -> g:leaderGuide_hspace
                    - Started documentation

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
